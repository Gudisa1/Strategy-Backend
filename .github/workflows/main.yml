name: CI/CD Docker Deploy

on:
  push:
    branches:
      - main  # Trigger on push to main branch

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      # 3. Build Django image
      - name: Build Django image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/strategybackend-web:latest -f Dockerfile .

      # 4. Push Django image to Docker Hub
      - name: Push Django image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/strategybackend-web:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      # 1. Install SSH client
      - name: Install SSH
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      # 2. Setup SSH agent with private key
      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      # 3. Deploy to EC2
      - name: Deploy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
            # Clone repo if it doesn't exist
            if [ ! -d ~/strategybackend ]; then
              git clone https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/Gudisa1/Strategy-Backend.git ~/strategybackend \
                --branch main --single-branch --quiet --depth 1
            fi

            cd ~/strategybackend || exit 1
            git fetch --all
            git reset --hard origin/main

            # Write env file on EC2
            cat > .env <<EOL
SECRET_KEY=${{ secrets.SECRET_KEY }}
DEBUG=${{ secrets.DEBUG }}
POSTGRES_DB=${{ secrets.POSTGRES_DB }}
POSTGRES_USER=${{ secrets.POSTGRES_USER }}
POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
DB_HOST=${{ secrets.DB_HOST }}
DB_PORT=${{ secrets.DB_PORT }}
ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
EOL

            # Recreate containers
            docker compose -f docker-compose.prod.yml down
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d --build
          "
